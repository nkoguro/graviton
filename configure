#!/usr/bin/env gosh
;; Configuring graviton
;; Run ./configure (or gosh ./configure) to generate Makefiles.

(use file.util)
(use gauche.config)
(use gauche.configure)
(use gauche.parameter)
(use gauche.process)
(use srfi-98)
(use util.match)

;; Here you can define handlers of configure arguments by cf-arg-enable
;; and cf-arg-with.  Note that --with-local is handled implicitly if you use
;; cf-init-gauche-extension.

(define wsl (let ((wslenv (get-environment-variable "WSLENV"))
                  (wsl-interop (get-environment-variable "WSL_INTEROP")))
              (cond
                ((and wslenv wsl-interop)
                 "2")
                (wslenv
                 "1")
                (else
                 #f))))
(define player-install-dir
  (if wsl
    (guard (e (else (report-error e)
                    (print "Failed to set up Graviton player install directory. Please specify the directory with --with-player-install-dir option."
                           (current-error-port))
                    (exit 1)))
      (let1 curdir (current-directory)
        (unwind-protect
            (begin
              (current-directory "/mnt/c/Windows/System32")
              (let* ((localappdata (process-output->string '("./cmd.exe" "/c" "echo %LOCALAPPDATA%")))
                     (player-path (build-path (process-output->string `("wslpath" "-u" ,localappdata))
                                              "gauche-graviton")))
                player-path))
          (current-directory curdir))))
    "${graviton-lib-dir}/player"))
(define alternative-player-path #f)
(define server-default-port 8080)
(define app-default-port 0)

(cf-arg-with 'wsl
             (cf-help-string
               "--with-wsl"
               "WSL version (1 or 2)")
             (lambda (with-wsl)
               (set! wsl (if (equal? with-wsl "") #f with-wsl))))

(cf-arg-with 'player-install-dir
             (cf-help-string
               "--with-player-install-dir"
               "The install directory of Graviton player.")
             (lambda (path)
               (set! player-install-dir path)))

(cf-arg-with 'alternative-player-path
             (cf-help-string
               "--with-alternative-player-path"
               "Specify the alternative player path. If this path is specified, the executable at the path is invoked if the client type is 'player.")
             (lambda (path)
               (set! alternative-player-path path)))

(cf-arg-with 'server-default-port
             (cf-help-string
               "--with-server-default-port"
               "Specify the default port for server mode. 0 means the ephemeral port. The default is 8080.")
             (lambda (port)
               (set! server-default-port (read-from-string port))))

(cf-arg-with 'app-default-port
             (cf-help-string
               "--with-app-default-port"
               "Specify the default port for app mode. 0 means the ephemeral port. The default is 0.")
             (lambda (port)
               (set! app-default-port (read-from-string port))))

;; Initialize configure.  This creates the global context, parses
;; command-line args and sets up default values.
(cf-init-gauche-extension)

;; Here you can add feature tests and other cf-define's.

(cf-subst 'WSL (write-to-string wsl))

(cf-subst 'GRAVITON_PLAYER_INSTALL_DIR player-install-dir)

(cf-subst 'ALTERNATIVE_PLAYER_PATH (write-to-string alternative-player-path))

(cf-subst 'SERVER_DEFAULT_PORT (write-to-string server-default-port))

(cf-subst 'APP_DEFAULT_PORT (write-to-string app-default-port))

(cf-subst 'GRAVITON_PLAYER_ARCH
          (let1 platform (gauche-config "--arch")
            (cond
              (wsl
               "win32-x64")
              ((#/x86_64-.*linux/i platform)
               "linux-x64")
              ((#/x86_64-.*w64/i platform)
               "win32-x64")
              ((#/x86-.*w32/i platform)
               "win32-ia32")
              ((#/x86_64-.*(darwin|macos)/i platform)
               "darwin-x64")
              ((#/arm64-.*(darwin|macos)/i platform)
               "darwin-arm64")
              ((#/armv7l-.*linux/i platform)
               "linux-armv7l")
              ((#/arm64-.*linux/i platform)
               "linux-arm64")
              (else
               ""))))

(cf-subst 'GRAVITON_PLAYER_EXECUTABLE
          (let1 platform (gauche-config "--arch")
            (cond
              (wsl
               "graviton-player.exe")
              ((#/.*-(darwin|macos)/i platform)
               "graviton-player.app/Contents/MacOS/graviton-player")
              (else
               (string-join (delete "" (list "graviton-player" (gauche-config "--executable-suffix"))) ".")))))

;; Output
(cf-output-default "lib/graviton/config-alist.scm")

;; Local variables:
;; mode: scheme
;; end:
