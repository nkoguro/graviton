(use gauche.parseopt)
(use graviton)
(use graviton.grut)

(define (make-node freq)
  (let1 oscillator (audio-context'create-oscillator)
    (set! (~ oscillator'type) "square")
    (set! (~ oscillator'frequency'value) freq)
    (oscillator'connect (~ audio-context'destination))
    oscillator))

;; args := ((freq len) ...)
(define (play-wave args)
  (let1 nodes (map (lambda (arg)
                     (cons (make-node (car arg)) (cdr arg)))
                   args)
    (fold (lambda (node+len t)
            (let ((node (car node+len))
                  (len (cadr node+len)))
              (node'start t)
              (node'stop (+ t len))
              (+ t len)))
          (~ audio-context'current-time)
          nodes)))

(define (is-browser?)
    (eq? (grv-config-parameter 'client) 'browser))

(define (main args)
  (let-args (cdr args)
      ((force-player? "player" #f)
       (force-browser? "browser" #f))
    (grv-config :client (cond
                          (force-player? 'player)
                          (force-browser? 'browser)
                          (else #f)))

    (with-window (cond
                   ((is-browser?)
                    (grut-text-window :font-size 24 :padding 5))
                   (else
                    #f))
        (text-console)
      (parameterize ((current-output-port (or text-console (current-output-port))))
        (when (is-browser?)
          (display "Hit space key to play.\n")
          (while (not (equal? (jsevent-await window "keyup" '(key)) " "))
            #t))
        (play-wave '((2000 0.1) (1000 0.1)))
        (asleep 1.0)
        (when (is-browser?)
          (display "done."))
        (close-window)))))
